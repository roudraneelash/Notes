what is a callback function?
when we pass a function inside another function as an arg, it is known as Callback function.

function x(y){
  //it is upto x, when y is called.
}
x(function y(){});

example.

-------------------------------------------------

setTimeout(function x(){
  console.log('timer')
},500)

//event listeners

document.getElementById('clickMe').addEventListener('click',function x(){
  console.log("Button Clicked");
});


//closures demo with event listener

const click = document.getElementById("click-me");
    {
      let count = 0;
      const print = () => {
        console.log("button clicked", ++count);
      };
      click.addEventListener("click", print);
      click.removeEventListener("click", () => {
        console.log("removed");
      });
    }

//garbage collection and removeEventListeners

we need to removeEventListener, as it holds its lexical scope and its scope variables

---------------------------------Call backk Hell, Inversion of control

const cart=["kurta","shoes","pant"];
-we need to complete few steps one after the other
-- createOrder
-- proceedToPayment
-- showOrderSummary
-- updateWalletBalance

api.createOrder(cart,function(){
  //depends on the createOrder function to call the proceedToPayment callback

  api.proceedToPayment(function(){
    //depends on the showOrderSummary function to call showOrderSummary callBack

    api.showOrderSummary(function(){
      //depens on updateWalletBalance  function to call updateWalletBalance callBack
      api.updateWalletBalance();
    });
  });
});

-- so here the code is increasing vertically, i.e nested callBack
-- here the excution of the callbacks are dependent on the function in which the callback is passed to,
   it is known as inversion of control. solution - promises

