classes concept is introduced in ES6 , as it is a super set of contructor function/prototypal inheritance
-- classes are not hoisted.

function Vehicle(car){
  this.car=car;
  this.getDetails=function(){
    console.log(`car name: ${car});
  }
}
const car= new Vehicle("Audi");
console.log(car);
/*
Vehicle {car: 'Audi', getDetails: ƒ}
car:"Audi"
getDetails: ƒ ()
*/
-------------------------------------------Class declaration
class Vehicle{
  constructor(car){
    this.car=car;
  }
  getDetails(){
    console.log(`car name:${this.car}`);
  }
}

const bike=new Vehicle("hayabusa");
console.log(bike);
/*
Vehicle {car: 'hayabusa'}
car: "hayabusa"
*/
Here the methods are inherited,via prototypal inheritance

---------------------------------------------Class expressions

const Vehicle= class{
  constructor(car){
    this.car=car;
  }
  getDetails(){
    console.log(`car name:${this.car}`);
  }
}

------------------------------------------Constructor function/Class(prototypal inheritance for Classes)
function Vehicle(car){
  this.car=car;
  this.getDetails=function(){
    console.log(`car name: ${car});
  }
}
const car= new Vehicle("Audi");
console.log(car);
/*
Vehicle {car: 'Audi', getDetails: ƒ}
car:"Audi"
getDetails: ƒ ()
*/

const bike=new Vehicle("hayabusa");
console.log(bike);
/*
Vehicle {car: 'hayabusa'}
car: "hayabusa"
*/
Here the methods are inherited,via prototypal inheritance

------------------------------------- Encapsulation (private members)

class Vehicle{
  #regNumber;//with # symbol, the property becomes private , cannot be accessed outside the class itself.
  constructor(regNumber){
    this.#regNumber=regNumber;
  }
}

------------------------------------- inheritance( extends )

class Vehicle{
  constructor(brand){
    this.#wheels=4;
    this.brand=brand;
  }
  getDetails(){
    console.log(`${this.#wheels} ${this.brand}`);
  }
}
class Car extends Vehicle{
  constructor(name,brand){
    super(brand);
    this.name=name;
  }
  getDetails(){
    console.log(`${this.#wheels}`);//gives error, cannot inherit private members
  }//method overriding
}

-------------------- OOPS(static properties)

function Movie(name,year){
this.name=name;
this.year=year;
this.getDetails=function(){
console.log(this.name,this.year);
}
}
const obj1=new Movie("Avengers",2021);
// console.log(obj1);
// obj1.getDetails();

------------------------------- using .prototype(), to create a function for the Movie prototype, here it wont create seperate copies of the property for each obj instance, rather create a commong property for the Movie prototype, i.e inheritance

function Movie(name,year){
this.name=name;
this.year=year;
}
Movie.prototype.getDetails=function(){
console.log(this.name,this.year);
}
const obj1=new Movie("Avengers",2021);
console.log(obj1);
obj1.getDetails();


------------------------ classes

class Movies{
  constructor(name,year)
  {
    this.name=name;this.year=year;
  }
  //here getDetails is created using .prototype(), we can access with ref to the instance
  getDetails(){
    console.log(this.name,this.year);
  }
  static print(){
    console.log("Hello from static method");
  }
}

const obj=new Movies("Avatar",2010);
Movies.print();//can call the static method without creating an obj instance