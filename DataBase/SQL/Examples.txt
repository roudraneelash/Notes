Here are the corrected queries based on the tasks provided:

1. **Send promotional email to our existing customers:**
    ```sql
    SELECT email FROM customer;
    ```

2. **What ratings do we have available:**
    ```sql
    SELECT DISTINCT rating FROM film;
    ```

3. **How many customers have the first name Jared:**
    ```sql
    SELECT COUNT(first_name) FROM customer WHERE first_name = 'Jared';
    ```

4. **What is the email for the customer with the name Nancy Thomas:**
    ```sql
    SELECT first_name, last_name, email FROM customer WHERE first_name = 'Nancy' AND last_name = 'Thomas';
    ```

5. **Reward our first 10 paying customers, what are cust_id who made a payment:**
    ```sql
    SELECT customer_id FROM payment ORDER BY payment_date ASC LIMIT 10;
    ```

6. **What are the titles of the 5 shortest (in length of runtime) movies:**
    ```sql
    SELECT title FROM film ORDER BY length ASC LIMIT 5;
    ```

7. **How many options does a customer have for movies 50 minutes or less in runtime:**
    ```sql
    SELECT COUNT(title) FROM film WHERE length <= 50;
    ```

8. **How many payment transactions were greater than $5.00:**
    ```sql
    SELECT COUNT(*) FROM payment WHERE amount > 5.00;
    ```

9. **How many actors have a first name that starts with the letter P:**
    ```sql
    SELECT COUNT(*) FROM actor WHERE first_name LIKE 'P%';
    ```

10. **How many unique districts are our customers from:**
    ```sql
    SELECT COUNT(DISTINCT district) FROM address;
    ```

11. **How many films have a rating of R and a replacement cost between $5 and $15:**
    ```sql
    SELECT COUNT(*) FROM film WHERE rating = 'R' AND replacement_cost BETWEEN 5 AND 15;
    ```

12. **How many films have the word Truman somewhere in the title:**
    ```sql
    SELECT COUNT(*) FROM film WHERE title LIKE '%Truman%';
    ```

13. **Total sales amount for each product:**
    ```sql
    SELECT ProductID, SUM(Amount) AS TotalSales FROM Sales GROUP BY ProductID ORDER BY SUM(Amount);
    ```

14. **Filter results to only include products with total sales greater than a certain amount:**
    ```sql
    SELECT ProductID, SUM(Amount) AS TotalSales FROM Sales GROUP BY ProductID HAVING SUM(Amount) > 1000;
    ```

15. **Get the customers who have done more than 40 payment transactions:**
    ```sql
    SELECT customer_id, COUNT(*) AS transaction_count FROM payment GROUP BY customer_id HAVING COUNT(*) >= 40;
    ```

16. **What are the customer_id of the customers who have spent more than $100 in payment transactions with staff_id member 2:**
    ```sql
    SELECT customer_id, SUM(amount) FROM payment WHERE staff_id = 2 GROUP BY customer_id HAVING SUM(amount) > 100;
    ```

17. **Return the customer IDs of customers who have spent at least $110 with the staff member who has an ID of 2:**
    ```sql
    SELECT customer_id, SUM(amount) FROM payment WHERE staff_id = 2 GROUP BY customer_id HAVING SUM(amount) > 110;
    ```

18. **How many films begin with the letter J:**
    ```sql
    SELECT COUNT(*) FROM film WHERE title LIKE 'J%';
    ```

19. **What customer has the highest customer ID number whose name starts with an 'E' and has an address ID lower than 500:**
    ```sql
    SELECT * FROM customer WHERE first_name LIKE 'E%' AND address_id < 500 ORDER BY customer_id DESC LIMIT 1;
    ```

These queries have been adjusted to fit the requirements and corrected for syntax errors.