In Spring, beans are objects managed by the Spring IoC container. Beans are typically the components of your application that you want Spring to instantiate, configure, and manage their lifecycle.

Creating Beans in Spring

There are several ways to declare a bean in Spring:

	1.	Using @Component or its specializations (@Service, @Repository, @Controller).
	2.	Using the @Bean annotation in a configuration class.

Each of these methods makes the class or method eligible for Spring to manage and instantiate the beans.

1. Constructor-based Dependency Injection

Constructor-based injection is preferred in Spring because it ensures that dependencies are not left uninitialized. Spring resolves and injects the dependencies through the constructor at the time of bean creation.

Example

import org.springframework.stereotype.Component;

@Component
public class ServiceA {
    private final RepositoryA repositoryA;

    // Constructor-based injection
    public ServiceA(RepositoryA repositoryA) {
        this.repositoryA = repositoryA;
    }

    public void performService() {
        repositoryA.saveData();
    }
}

@Component
public class RepositoryA {
    public void saveData() {
        System.out.println("Data saved!");
    }
}

In this example:

	•	ServiceA depends on RepositoryA, and its dependency is injected through the constructor.
	•	Spring automatically resolves and injects RepositoryA when it creates ServiceA.

Explanation

	•	When Spring detects @Component, it registers both ServiceA and RepositoryA as beans.
	•	During application startup, Spring creates RepositoryA first, then passes it to the constructor of ServiceA when ServiceA is instantiated.

2. Setter-based Dependency Injection

Setter-based injection allows Spring to inject dependencies through setter methods after the bean is instantiated.

Example

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component
public class ServiceB {
    private RepositoryB repositoryB;

    // Setter-based injection
    @Autowired
    public void setRepositoryB(RepositoryB repositoryB) {
        this.repositoryB = repositoryB;
    }

    public void performService() {
        repositoryB.saveData();
    }
}

@Component
public class RepositoryB {
    public void saveData() {
        System.out.println("Data saved by RepositoryB!");
    }
}

In this example:

	•	Spring injects RepositoryB through the setter method setRepositoryB().

Explanation

	•	Spring first instantiates the ServiceB object.
	•	Then, it calls the setter method setRepositoryB() and injects RepositoryB after the bean is created.

3. Field-based Dependency Injection

Field-based injection is a simpler method where Spring injects dependencies directly into the fields using the @Autowired annotation. However, this is less preferred because it bypasses constructor validation.

Example

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component
public class ServiceC {
    // Field-based injection
    @Autowired
    private RepositoryC repositoryC;

    public void performService() {
        repositoryC.saveData();
    }
}

@Component
public class RepositoryC {
    public void saveData() {
        System.out.println("Data saved by RepositoryC!");
    }
}

In this example:

	•	RepositoryC is injected directly into the field repositoryC without the need for a constructor or setter method.

Explanation

	•	Spring uses reflection to inject RepositoryC into ServiceC during bean creation.
	•	While this approach is simpler, it is not recommended for complex applications as it makes the code harder to test and maintain.

What is a Bean in Spring?

A bean in Spring is simply an object that is managed by the Spring IoC container. A bean can be created either by:

	1.	Annotating the class with @Component, @Service, @Repository, or @Controller.
	2.	Defining a method annotated with @Bean in a configuration class annotated with @Configuration.

Example of Bean Creation via @Bean

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class AppConfig {

    @Bean
    public ServiceD serviceD() {
        return new ServiceD(repositoryD());
    }

    @Bean
    public RepositoryD repositoryD() {
        return new RepositoryD();
    }
}

class ServiceD {
    private final RepositoryD repositoryD;

    public ServiceD(RepositoryD repositoryD) {
        this.repositoryD = repositoryD;
    }

    public void performService() {
        repositoryD.saveData();
    }
}

class RepositoryD {
    public void saveData() {
        System.out.println("Data saved by RepositoryD!");
    }
}

	•	The AppConfig class is marked as a configuration class using @Configuration.
	•	Inside this class, two beans are created using @Bean, namely serviceD and repositoryD.
	•	The IoC container automatically manages these beans and resolves their dependencies.

Multiple Beans of the Same Type: Using @Qualifier

When there are multiple beans of the same type, Spring needs a way to differentiate between them. This is where @Qualifier comes in. It allows you to specify exactly which bean to inject.

Example with Two Beans of the Same Type

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

@Component
public class ServiceE {

    private final RepositoryE repositoryE;

    @Autowired
    public ServiceE(@Qualifier("repositoryE2") RepositoryE repositoryE) {
        this.repositoryE = repositoryE;
    }

    public void performService() {
        repositoryE.saveData();
    }
}

@Component("repositoryE1")
class RepositoryE1 implements RepositoryE {
    public void saveData() {
        System.out.println("Data saved by RepositoryE1!");
    }
}

@Component("repositoryE2")
class RepositoryE2 implements RepositoryE {
    public void saveData() {
        System.out.println("Data saved by RepositoryE2!");
    }
}

interface RepositoryE {
    void saveData();
}

In this example:

	•	RepositoryE1 and RepositoryE2 are two beans of the same type RepositoryE.
	•	To specify which bean to inject, the @Qualifier("repositoryE2") annotation is used.

Explanation

	•	Without @Qualifier, Spring would throw a NoUniqueBeanDefinitionException because there are two beans of the same type RepositoryE.
	•	@Qualifier is used to explicitly indicate which bean to inject when multiple beans of the same type exist.

Summary

	1.	Beans in Spring are objects that are managed by the Spring IoC container, and they can be defined using @Component, @Service, @Repository, @Controller, or @Bean annotations.
	2.	Dependency Injection (DI) allows Spring to inject dependencies into beans either via constructor-based, setter-based, or field-based methods.
	•	Constructor-based injection is preferred for mandatory dependencies and ensures immutability.
	•	Setter-based injection is useful when you want optional dependencies or to allow dynamic changes.
	•	Field-based injection is simple but less flexible and harder to test.
	3.	Multiple Beans of the same type can lead to ambiguity, which is resolved by using the @Qualifier annotation to specify the exact bean to inject.

These techniques are essential for writing modular, testable, and maintainable code in Spring-based applications.


---------------------------------------------- Bean lifecycle

In Spring, the lifecycle of a bean refers to the series of stages a bean goes through from the time it is instantiated by the IoC container until it is destroyed. Spring provides multiple ways to hook into the bean lifecycle to perform custom actions at different stages.

The lifecycle can be broken down into the following main stages:

1. Bean Instantiation

	•	When the Spring IoC container starts, it creates instances of beans as defined in the configuration (either via @Component scanning or using @Bean methods in @Configuration classes).
	•	The instantiation process is simply creating an object of the class (e.g., calling new on the class). The IoC container handles the instantiation.

2. Dependency Injection (DI)

	•	After the bean is instantiated, the Spring IoC container performs dependency injection. Based on the type of injection used (constructor-based, setter-based, or field-based), Spring injects the required dependencies into the bean.
	•	For constructor-based injection, dependencies are injected during the instantiation phase.
	•	For setter-based or field-based injection, Spring injects the dependencies after the bean is instantiated.

3. Bean Initialization

	•	Once dependency injection is complete, Spring performs any initialization tasks. Spring allows you to define custom initialization logic to be executed after dependency injection but before the bean is ready for use.

There are different ways to define initialization logic:

	•	Using @PostConstruct annotation (from JSR-250):
This method is called after the bean is instantiated and dependencies are injected.

@PostConstruct
public void init() {
    // custom initialization logic
}


	•	Implementing InitializingBean interface:
The bean can implement afterPropertiesSet() method to perform initialization.

public class MyBean implements InitializingBean {
    @Override
    public void afterPropertiesSet() {
        // custom initialization logic
    }
}


	•	Specifying initMethod in the configuration:
You can define a custom method that will be called after the bean is fully initialized using the @Bean(initMethod = "init") attribute.

@Bean(initMethod = "customInit")
public MyBean myBean() {
    return new MyBean();
}



4. Bean Ready for Use

	•	After initialization, the bean is fully ready to be used in the application. At this stage, the IoC container makes the bean available for dependency injection into other beans or for processing web requests, database queries, etc.

5. Bean Destruction

	•	When the application context is closed (either during application shutdown or if a bean’s scope is such that it is no longer needed), the Spring IoC container triggers the destruction of beans.
	•	Spring allows you to define custom destruction logic to perform any cleanup tasks.

There are different ways to define destruction logic:

	•	Using @PreDestroy annotation:
This method is called before the bean is destroyed.

@PreDestroy
public void cleanup() {
    // custom cleanup logic
}


	•	Implementing DisposableBean interface:
The bean can implement destroy() method to perform cleanup.

public class MyBean implements DisposableBean {
    @Override
    public void destroy() {
        // custom cleanup logic
    }
}


	•	Specifying destroyMethod in the configuration:
You can define a custom method that will be called before the bean is destroyed using the @Bean(destroyMethod = "cleanup") attribute.

@Bean(destroyMethod = "customCleanup")
public MyBean myBean() {
    return new MyBean();
}



Bean Lifecycle Summary with Code Example

Here’s a comprehensive code example showing the entire lifecycle of a Spring bean, utilizing @PostConstruct and @PreDestroy annotations for custom initialization and destruction.

Bean Lifecycle Example

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;
import org.springframework.beans.factory.DisposableBean;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.stereotype.Component;

@Component
public class MyBean implements InitializingBean, DisposableBean {

    // Constructor
    public MyBean() {
        System.out.println("Bean instantiated");
    }

    // Constructor-based Dependency Injection happens here if any

    @Override
    public void afterPropertiesSet() throws Exception {
        System.out.println("InitializingBean - afterPropertiesSet() called");
    }

    @PostConstruct
    public void postConstruct() {
        System.out.println("@PostConstruct method called");
    }

    public void customInit() {
        System.out.println("Custom init method called");
    }

    public void doSomething() {
        System.out.println("Bean is ready and performing work");
    }

    @PreDestroy
    public void preDestroy() {
        System.out.println("@PreDestroy method called");
    }

    @Override
    public void destroy() throws Exception {
        System.out.println("DisposableBean - destroy() called");
    }

    public void customDestroy() {
        System.out.println("Custom destroy method called");
    }
}

Explanation of the Bean Lifecycle in the Example

	1.	Instantiation: The MyBean() constructor is called.
	•	Output: "Bean instantiated"
	2.	Dependency Injection: If the bean had dependencies, they would be injected here.
	3.	Initialization:
	•	The method annotated with @PostConstruct is called.
	•	Output: "@PostConstruct method called"
	•	The afterPropertiesSet() method from InitializingBean is called.
	•	Output: "InitializingBean - afterPropertiesSet() called"
	•	Any custom initialization method (if defined using @Bean(initMethod)) is called.
	•	Output: "Custom init method called"
	4.	Bean Ready: The bean can now be used. You can call its methods.
	•	Output: "Bean is ready and performing work"
	5.	Destruction:
	•	The method annotated with @PreDestroy is called before the bean is destroyed.
	•	Output: "@PreDestroy method called"
	•	The destroy() method from DisposableBean is called.
	•	Output: "DisposableBean - destroy() called"
	•	Any custom destruction method (if defined using @Bean(destroyMethod)) is called.
	•	Output: "Custom destroy method called"

Complete Lifecycle Phases in Detail

	1.	Instantiation: The Spring container instantiates the bean, usually by calling the constructor (and injecting constructor-based dependencies).
	2.	Populate Properties (Dependency Injection): The Spring container performs dependency injection, wiring required dependencies (fields, setters, constructors) into the bean.
	3.	Post-Instantiation Hooks (e.g., @PostConstruct): Any methods annotated with @PostConstruct are invoked, or the afterPropertiesSet() method (if the bean implements InitializingBean) is called. This is where you can add initialization logic.
	4.	Bean Ready for Use: The bean is fully initialized and ready to be used in the application (e.g., processing requests, interacting with other beans).
	5.	Pre-Destroy Hooks (e.g., @PreDestroy): Before the bean is destroyed, the container invokes methods annotated with @PreDestroy or calls destroy() if the bean implements DisposableBean.
	6.	Destruction: The bean is destroyed by the IoC container when the application context is shut down or when the bean’s scope is no longer valid.

Bean Lifecycle and Scopes

	•	Singleton (default scope): The lifecycle is managed once for the entire application.
	•	Prototype: A new instance is created every time the bean is requested, and Spring does not manage its destruction.
	•	Request/Session: Relevant in web applications where beans are created per HTTP request or session.

Key Lifecycle Interfaces and Annotations

	•	InitializingBean: For custom initialization logic, implement the afterPropertiesSet() method.
	•	DisposableBean: For custom destruction logic, implement the destroy() method.
	•	@PostConstruct: Marks a method to be invoked after the bean is initialized.
	•	@PreDestroy: Marks a method to be invoked before the bean is destroyed.

Understanding and leveraging the bean lifecycle can help you manage resources efficiently, initialize beans properly, and release resources when necessary.